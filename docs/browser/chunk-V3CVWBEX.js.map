{
  "version": 3,
  "sources": ["src/app/common/post-login/cart.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { cartitem, productType } from '../../constants.ts/types';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartService {\r\n  cart: any[] = [];\r\n  ordersChanged = new BehaviorSubject<any>(this.cart);\r\n  showSideCart = new BehaviorSubject<boolean>(false);\r\n  grandTotalValue: number = 0;\r\n  grandTotal = new BehaviorSubject<number>(this.grandTotalValue);\r\n\r\n  constructor() {}\r\n\r\n  addToCart(_item: cartitem) {\r\n    if (_item) {\r\n      this.cart.push(_item);\r\n      this.ordersChanged.next(this.cart);\r\n      this.calculateGrandTotal();\r\n    }\r\n  }\r\n  calculateGrandTotal() {\r\n    /*    this.cart;\r\n    if (_item) {\r\n      console.log('this.cart.length', this.cart.length);\r\n      if (this.cart.length == 0) {\r\n        console.log('_item', _item);\r\n        _item.grandTotal = Number(_item.totalPrice) * Number(_item.quantity);\r\n\r\n        //   this.cart.push(_item);\r\n        /*     \r\n      this.cart.push(_item); \r\n  } */\r\n    if (this.cart.length == 0) {\r\n      this.grandTotal.next(0);\r\n    }\r\n    if (this.cart.length >= 1) {\r\n      this.cart.map((element: any) => {\r\n        element.grandTotal = element.item.price * element.quantity; //* Number(element.quantity);\r\n\r\n        console.log('element.map', element);\r\n        console.log('_item.grandTotal', element.grandTotal);\r\n        //Number(element.totalPrice);\r\n        this.grandTotalValue += element.grandTotal;\r\n        console.log('this.grandTotalValue', this.grandTotalValue);\r\n        // acc = acc + element.totalPrice;\r\n        // element.grandTotal = acc;\r\n      });\r\n      /*  this.cart.reduce((acc: number, element: any) => {\r\n        console.log('acc cement:::', acc);\r\n        acc = element.grandTotal + acc;\r\n        this.grandTotalValue = acc;\r\n        console.log('this.grandTotalValue', this.grandTotalValue);\r\n        // acc = acc + element.totalPrice;\r\n        // element.grandTotal = acc;\r\n      }, 0);\r\n      const sumWithInitial = this.cart.reduce(\r\n        (accumulator, currentValue) => accumulator + currentValue.grandTotal,\r\n        0\r\n      ); */\r\n      const sum = this.cart.reduce((acc, o) => acc + parseInt(o.grandTotal), 0);\r\n      console.log('sumWithInitial', sum);\r\n\r\n      this.grandTotal.next(sum);\r\n      //   this.cart.push(_item);\r\n      /*     \r\n                  if ((this.cart.length = 1)) {\r\n            _item.grandTotal =\r\n              Number(element.quantity) * Number(element.item.price);\r\n            console.log('_item.grandTotal == 0', typeof element.item.price);\r\n          } else {\r\n            _item.grandTotal = element.item.totalPrice + _item.grandTotal;\r\n          }\r\n        this.cart.push(_item); */\r\n    }\r\n    // this.cart.push(_item);\r\n    //this.cart = [...this.cart, { grandTotal: this.grandTotal }];\r\n\r\n    //this.ordersChanged.next(this.cart);\r\n  }\r\n  updateCart(item: any, value: any) {\r\n    //  this.cart.findIndex((item: any) => item.item.id === value.item.id);\r\n    this.cart.forEach((element, index) => {\r\n      if (element.item.id === item.item.id) {\r\n        //console.log('this.cart.service else', this.cart);\r\n        element.quantity = value;\r\n        element.totalPrice = Number(value) * Number(element.item.price);\r\n        // items[index] = item;\r\n      }\r\n    });\r\n    this.calculateGrandTotal();\r\n    // console.log('this.cart.service here', this.cart);\r\n  }\r\n  getCart() {\r\n    // this.ordersChanged.next(this.orders);\r\n    return this.ordersChanged;\r\n  }\r\n  removeFromCart(_item: cartitem) {\r\n    console.log('console here');\r\n    let i = this.cart.indexOf(_item);\r\n    this.cart.splice(i, 1);\r\n    this.calculateGrandTotal();\r\n  }\r\n  showSideCartFunct() {\r\n    this.showSideCart.next(true);\r\n  }\r\n  hideSideCartFunct() {\r\n    this.showSideCart.next(false);\r\n  }\r\n  showhideSideCartFunct(dekho: boolean) {\r\n    this.showSideCart.next(dekho);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;AAMM,IAAO,eAAP,MAAO,aAAW;EAOtB,cAAA;AANA,SAAA,OAAc,CAAA;AACd,SAAA,gBAAgB,IAAI,gBAAqB,KAAK,IAAI;AAClD,SAAA,eAAe,IAAI,gBAAyB,KAAK;AACjD,SAAA,kBAA0B;AAC1B,SAAA,aAAa,IAAI,gBAAwB,KAAK,eAAe;EAE9C;EAEf,UAAU,OAAe;AACvB,QAAI,OAAO;AACT,WAAK,KAAK,KAAK,KAAK;AACpB,WAAK,cAAc,KAAK,KAAK,IAAI;AACjC,WAAK,oBAAmB;IAC1B;EACF;EACA,sBAAmB;AAYjB,QAAI,KAAK,KAAK,UAAU,GAAG;AACzB,WAAK,WAAW,KAAK,CAAC;IACxB;AACA,QAAI,KAAK,KAAK,UAAU,GAAG;AACzB,WAAK,KAAK,IAAI,CAAC,YAAgB;AAC7B,gBAAQ,aAAa,QAAQ,KAAK,QAAQ,QAAQ;AAElD,gBAAQ,IAAI,eAAe,OAAO;AAClC,gBAAQ,IAAI,oBAAoB,QAAQ,UAAU;AAElD,aAAK,mBAAmB,QAAQ;AAChC,gBAAQ,IAAI,wBAAwB,KAAK,eAAe;MAG1D,CAAC;AAaD,YAAM,MAAM,KAAK,KAAK,OAAO,CAAC,KAAK,MAAM,MAAM,SAAS,EAAE,UAAU,GAAG,CAAC;AACxE,cAAQ,IAAI,kBAAkB,GAAG;AAEjC,WAAK,WAAW,KAAK,GAAG;IAW1B;EAKF;EACA,WAAW,MAAW,OAAU;AAE9B,SAAK,KAAK,QAAQ,CAAC,SAAS,UAAS;AACnC,UAAI,QAAQ,KAAK,OAAO,KAAK,KAAK,IAAI;AAEpC,gBAAQ,WAAW;AACnB,gBAAQ,aAAa,OAAO,KAAK,IAAI,OAAO,QAAQ,KAAK,KAAK;MAEhE;IACF,CAAC;AACD,SAAK,oBAAmB;EAE1B;EACA,UAAO;AAEL,WAAO,KAAK;EACd;EACA,eAAe,OAAe;AAC5B,YAAQ,IAAI,cAAc;AAC1B,QAAI,IAAI,KAAK,KAAK,QAAQ,KAAK;AAC/B,SAAK,KAAK,OAAO,GAAG,CAAC;AACrB,SAAK,oBAAmB;EAC1B;EACA,oBAAiB;AACf,SAAK,aAAa,KAAK,IAAI;EAC7B;EACA,oBAAiB;AACf,SAAK,aAAa,KAAK,KAAK;EAC9B;EACA,sBAAsB,OAAc;AAClC,SAAK,aAAa,KAAK,KAAK;EAC9B;;;mBA1GW,cAAW;AAAA;gFAAX,cAAW,SAAX,aAAW,WAAA,YAFV,OAAM,CAAA;AAEd,IAAO,cAAP;",
  "names": []
}
